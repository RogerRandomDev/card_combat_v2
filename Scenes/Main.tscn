[gd_scene load_steps=23 format=3 uid="uid://fk5e4jmklt3v"]

[ext_resource type="PackedScene" uid="uid://bf60m6chm01yy" path="res://Scenes/enemy.tscn" id="1_0nfr2"]
[ext_resource type="Script" path="res://Scripts/main.gd" id="1_1hmnv"]
[ext_resource type="PackedScene" uid="uid://dsoibnltwojmr" path="res://Scenes/ally.tscn" id="2_q6vu5"]
[ext_resource type="Theme" uid="uid://depumydraltld" path="res://fonts/gametheme.tres" id="2_wu3dd"]
[ext_resource type="Texture2D" uid="uid://cu3fyp100elcq" path="res://Textures/Card.png" id="5_eivyd"]
[ext_resource type="Script" path="res://Scripts/Camera.gd" id="6_8q8xe"]
[ext_resource type="Script" path="res://Scripts/storestack.gd" id="6_l201b"]
[ext_resource type="Texture2D" uid="uid://cmlqnuu2smw4c" path="res://Textures/icons/combat/store_icon.png" id="6_w02hj"]
[ext_resource type="Texture2D" uid="uid://do88enexe7ikk" path="res://Textures/background/background0.png" id="7_1a4vk"]
[ext_resource type="Texture2D" uid="uid://txqxc2bts3kc" path="res://Textures/background/table_base.png" id="9_4oybm"]

[sub_resource type="Animation" id="Animation_bw3in"]
resource_name = "activate_action"
length = 0.5
loop_mode = 1
tracks/0/type = "method"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"trigger_action"
}]
}

[sub_resource type="Animation" id="Animation_igwnr"]
resource_name = "enemy_turn"
length = 0.5
loop_mode = 1
tracks/0/type = "method"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0.5),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"trigger_enemy_action"
}]
}

[sub_resource type="Animation" id="Animation_ppuey"]
resource_name = "fillhand"
length = 0.125
loop_mode = 1
tracks/0/type = "method"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0.125),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"add_card_to_hand"
}]
}

[sub_resource type="Animation" id="Animation_utqgd"]
resource_name = "flipcards"
length = 0.375
loop_mode = 1
tracks/0/type = "method"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"remove_card"
}]
}

[sub_resource type="Animation" id="Animation_ubbt7"]
resource_name = "shuffle"
length = 0.125
loop_mode = 1
tracks/0/type = "method"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [],
"method": &"shuffle"
}]
}

[sub_resource type="Gradient" id="Gradient_m76ym"]
colors = PackedColorArray(1, 1, 1, 1, 1, 1, 1, 0)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_km78f"]
gradient = SubResource( "Gradient_m76ym" )

[sub_resource type="ParticlesMaterial" id="ParticlesMaterial_ah3kx"]
emission_shape = 5
emission_ring_axis = Vector3(0, 0, 1)
emission_ring_height = 1.0
emission_ring_radius = 144.0
emission_ring_inner_radius = 144.0
particle_flag_align_y = true
particle_flag_disable_z = true
gravity = Vector3(0, 0, 0)
orbit_velocity_min = -0.25
orbit_velocity_max = 0.25
radial_accel_min = -50.0
radial_accel_max = -50.0
scale_min = 8.0
scale_max = 8.0
color = Color(0, 1, 0.980392, 1)
color_ramp = SubResource( "GradientTexture1D_km78f" )
hue_variation_min = -0.13
hue_variation_max = 0.13

[sub_resource type="Shader" id="Shader_24f2r"]
code = "shader_type canvas_item;

uniform float lod: hint_range(0.0, 5) = 0.0;

void fragment(){
	vec3 color = texture(SCREEN_TEXTURE, SCREEN_UV, lod).rgb;
	vec3 base_col = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	color.r=max(color.r,base_col.r);
	color.g=max(color.g,base_col.g);
	color.b=max(color.b,base_col.b);
	COLOR.rgb = base_col*vec3(0.5,0.5,0.5)+color*vec3(0.5,0.5,0.5);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jjbiw"]
shader = SubResource( "Shader_24f2r" )
shader_param/lod = 2.5

[sub_resource type="Shader" id="Shader_u7m4y"]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 4.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qssfs"]
shader = SubResource( "Shader_u7m4y" )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.05
shader_param/scanlines_width = 0.5
shader_param/grille_opacity = 0.05
shader_param/resolution = Vector2(512, 300)
shader_param/pixelate = false
shader_param/roll = true
shader_param/roll_speed = 8.0
shader_param/roll_size = 25.286
shader_param/roll_variation = 0.213
shader_param/distort_intensity = 0.005
shader_param/noise_opacity = 0.125
shader_param/noise_speed = 0.331
shader_param/static_noise_intensity = 0.01
shader_param/aberration = 0.005
shader_param/brightness = 1.0
shader_param/discolor = true
shader_param/warp_amount = 0.5
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.207
shader_param/vignette_opacity = 1.0

[node name="game_base" type="Node2D"]

[node name="CombatContainer" type="Control" parent="."]
offset_right = 1024.0
offset_bottom = 600.0

[node name="game_combat" type="Control" parent="CombatContainer"]
texture_filter = 1
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 1
script = ExtResource( "1_1hmnv" )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="EnemyList" type="VBoxContainer" parent="CombatContainer/game_combat"]
offset_left = 94.0
offset_top = 72.0
offset_right = 94.0
offset_bottom = 392.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )
alignment = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="enemy" parent="CombatContainer/game_combat/EnemyList" instance=ExtResource( "1_0nfr2" )]
anchor_right = 0.0
anchor_bottom = 0.0
offset_right = 0.0
offset_bottom = 104.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )

[node name="enemy2" parent="CombatContainer/game_combat/EnemyList" instance=ExtResource( "1_0nfr2" )]
anchor_right = 0.0
anchor_bottom = 0.0
offset_top = 108.0
offset_right = 0.0
offset_bottom = 212.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )

[node name="enemy3" parent="CombatContainer/game_combat/EnemyList" instance=ExtResource( "1_0nfr2" )]
anchor_right = 0.0
anchor_bottom = 0.0
offset_top = 216.0
offset_right = 0.0
offset_bottom = 320.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )

[node name="AllyList" type="VBoxContainer" parent="CombatContainer/game_combat"]
offset_left = 900.0
offset_top = 72.0
offset_right = 900.0
offset_bottom = 392.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )
alignment = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ally" parent="CombatContainer/game_combat/AllyList" instance=ExtResource( "2_q6vu5" )]
anchor_right = 0.0
anchor_bottom = 0.0
offset_bottom = 104.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )

[node name="ally2" parent="CombatContainer/game_combat/AllyList" instance=ExtResource( "2_q6vu5" )]
anchor_right = 0.0
anchor_bottom = 0.0
offset_top = 108.0
offset_bottom = 212.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )

[node name="ally3" parent="CombatContainer/game_combat/AllyList" instance=ExtResource( "2_q6vu5" )]
anchor_right = 0.0
anchor_bottom = 0.0
offset_top = 216.0
offset_bottom = 320.0
size_flags_vertical = 3
theme = ExtResource( "2_wu3dd" )

[node name="CardList" type="HBoxContainer" parent="CombatContainer/game_combat"]
offset_top = 568.0
offset_right = 1024.0
offset_bottom = 600.0
theme = ExtResource( "2_wu3dd" )
theme_override_constants/separation = 16
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="cardstack" type="Control" parent="CombatContainer/game_combat"]
offset_left = 960.0
offset_top = 472.0
offset_right = 960.0
offset_bottom = 472.0
theme = ExtResource( "2_wu3dd" )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="c1" type="TextureRect" parent="CombatContainer/game_combat/cardstack"]
modulate = Color(0.501961, 0.423529, 0.345098, 1)
offset_left = -32.0
offset_top = -47.0
offset_right = 32.0
offset_bottom = 47.0
theme = ExtResource( "2_wu3dd" )
texture = ExtResource( "5_eivyd" )
ignore_texture_size = true
stretch_mode = 5

[node name="c2" type="TextureRect" parent="CombatContainer/game_combat/cardstack"]
modulate = Color(0.501961, 0.423529, 0.345098, 1)
offset_left = -32.0
offset_top = -47.0
offset_right = 32.0
offset_bottom = 47.0
theme = ExtResource( "2_wu3dd" )
texture = ExtResource( "5_eivyd" )
ignore_texture_size = true
stretch_mode = 5

[node name="c3" type="TextureRect" parent="CombatContainer/game_combat/cardstack"]
modulate = Color(0.501961, 0.423529, 0.345098, 1)
offset_left = -32.0
offset_top = -47.0
offset_right = 32.0
offset_bottom = 47.0
theme = ExtResource( "2_wu3dd" )
texture = ExtResource( "5_eivyd" )
ignore_texture_size = true
stretch_mode = 5
__meta__ = {
"_edit_use_anchors_": false
}

[node name="storestack" type="TextureRect" parent="CombatContainer/game_combat"]
self_modulate = Color(0.501961, 0.423529, 0.345098, 1)
offset_left = 32.0
offset_top = 424.0
offset_right = 96.0
offset_bottom = 518.0
theme = ExtResource( "2_wu3dd" )
texture = ExtResource( "5_eivyd" )
ignore_texture_size = true
stretch_mode = 5
script = ExtResource( "6_l201b" )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="CombatContainer/game_combat/storestack"]
offset_right = 64.0
offset_bottom = 26.0
theme = ExtResource( "2_wu3dd" )
text = "Store"
horizontal_alignment = 1

[node name="Sprite2D" type="Sprite2D" parent="CombatContainer/game_combat/storestack/Label"]
position = Vector2(4, 16)
scale = Vector2(8, 8)
texture = ExtResource( "6_w02hj" )
centered = false

[node name="AnimationPlayer" type="AnimationPlayer" parent="CombatContainer/game_combat"]
anims/activate_action = SubResource( "Animation_bw3in" )
anims/enemy_turn = SubResource( "Animation_igwnr" )
anims/fillhand = SubResource( "Animation_ppuey" )
anims/flipcards = SubResource( "Animation_utqgd" )
anims/shuffle = SubResource( "Animation_ubbt7" )

[node name="action_stopper" type="Control" parent="CombatContainer/game_combat"]
offset_right = 1024.0
offset_bottom = 600.0
rect_min_size = Vector2(1024, 600)

[node name="background" type="TextureRect" parent="CombatContainer/game_combat"]
show_behind_parent = true
offset_top = -96.0
offset_right = 1024.0
offset_bottom = 416.0
mouse_filter = 2
texture = ExtResource( "7_1a4vk" )
ignore_texture_size = true
stretch_mode = 5
__meta__ = {
"_edit_use_anchors_": false
}

[node name="table" type="TextureRect" parent="CombatContainer/game_combat"]
show_behind_parent = true
offset_top = 320.0
offset_right = 1024.0
offset_bottom = 832.0
mouse_filter = 2
texture = ExtResource( "9_4oybm" )
ignore_texture_size = true
stretch_mode = 5
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Camera" type="Camera2D" parent="CombatContainer/game_combat"]
anchor_mode = 0
current = true
script = ExtResource( "6_8q8xe" )

[node name="Turn" type="Label" parent="CombatContainer/game_combat"]
offset_left = 320.0
offset_top = 32.0
offset_right = 704.0
offset_bottom = 74.0
rect_min_size = Vector2(256, 0)
theme = ExtResource( "2_wu3dd" )
theme_type_variation = &"HeaderLarge"
text = "ALLY'S TURN"
horizontal_alignment = 1
autowrap_mode = 2
uppercase = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Enemy" type="Label" parent="CombatContainer/game_combat/Turn"]
offset_left = -384.0
offset_top = -12.0
offset_bottom = 30.0
rect_min_size = Vector2(256, 0)
theme = ExtResource( "2_wu3dd" )
theme_type_variation = &"HeaderLarge"
text = "ENEMY"
horizontal_alignment = 1
autowrap_mode = 2
uppercase = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Ally" type="Label" parent="CombatContainer/game_combat/Turn"]
offset_left = 384.0
offset_top = -12.0
offset_right = 768.0
offset_bottom = 30.0
rect_min_size = Vector2(256, 0)
rect_scale = Vector2(0.992197, 0.995221)
theme = ExtResource( "2_wu3dd" )
theme_type_variation = &"HeaderLarge"
text = "ALLY"
horizontal_alignment = 1
autowrap_mode = 2
uppercase = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="card_description" type="Label" parent="CombatContainer/game_combat"]
offset_left = 256.0
offset_top = 408.0
offset_right = 768.0
offset_bottom = 431.0
rect_min_size = Vector2(512, 0)
theme_type_variation = &"HeaderSmall"
horizontal_alignment = 1
autowrap_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="selectable_particles" type="GPUParticles2D" parent="CombatContainer/game_combat"]
position = Vector2(896, 180)
scale = Vector2(0.5, 1)
emitting = false
amount = 128
lifetime = 2.0
process_material = SubResource( "ParticlesMaterial_ah3kx" )

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0

[node name="glow_shader" type="CanvasLayer" parent="."]

[node name="shader_layer" type="ColorRect" parent="glow_shader"]
material = SubResource( "ShaderMaterial_jjbiw" )
offset_right = 1024.0
offset_bottom = 600.0
rect_min_size = Vector2(1024, 600)
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="screen_shader" type="CanvasLayer" parent="."]

[node name="shader_layer2" type="ColorRect" parent="screen_shader"]
material = SubResource( "ShaderMaterial_qssfs" )
offset_right = 1024.0
offset_bottom = 600.0
rect_min_size = Vector2(1024, 600)
mouse_filter = 2

[connection signal="mouse_entered" from="CombatContainer/game_combat/storestack" to="CombatContainer/game_combat/storestack" method="hover_over"]
[connection signal="mouse_exited" from="CombatContainer/game_combat/storestack" to="CombatContainer/game_combat/storestack" method="stop_hover"]
